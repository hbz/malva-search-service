plugins {
    id "org.sonarqube" version "2.2"
    id 'nebula.ospackage' version '4.0.0'
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGroovy: %s\nGradle: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        GroovySystem.getVersion(),
        gradle.gradleVersion

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'nebula.rpm'

// for web browser testing
import org.apache.tools.ant.taskdefs.condition.Os

ext {
    user = 'xbib'
    description = 'Malva search service with SRU, CQL'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    versions = [
            'groovy': '2.4.7',
            'malva' : '1.0.0',
            'elasticsearch' : '2.2.1',
            'tcnative': '1.1.33.Fork23',
            'alpnboot': '8.1.9.v20160720',
            'javassist': '3.20.0-GA',
            'junit' : '4.12',
            'log4j' : '2.7',
            'geb': '0.13.1',
            'selenium': '2.52.0',
            'chrome': '2.10',
            'phantomJs':  '1.9.7'
    ]
    drivers = ["firefox", "chrome", "phantomJs"]
}
apply from: "gradle/downloads.gradle"

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    integrationTest {
        groovy {
            srcDir file('src/integration-test/groovy')
            compileClasspath += main.output + test.output
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

configurations {
    alpnboot
    wagon
    distJars
    integrationTestCompile {
        extendsFrom testCompile
    }
    integrationTestRuntime {
        extendsFrom testRuntime
    }
}

dependencies {
    compile "org.xbib.malva:malva-elasticsearch:${versions.malva}"
    compile "org.xbib:cql:1.0.1"
    compile "org.xbib:content-xml:1.0.7"
    compile 'com.fasterxml.woodstox:woodstox-core:5.0.3'
    compile 'xerces:xercesImpl:2.11.0'
    compile 'xalan:xalan:2.7.2'
    compileOnly "org.codehaus.groovy:groovy-all:${versions.groovy}"
    testCompile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
    testCompile "org.apache.logging.log4j:log4j-jul:${versions.log4j}"
    testCompile 'junit:junit:4.12'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    integrationTestCompile "org.gebish:geb-junit4:" + versions.geb
    integrationTestCompile 'org.seleniumhq.selenium:selenium-chrome-driver:' + versions.selenium
    integrationTestCompile 'org.seleniumhq.selenium:selenium-firefox-driver:' + versions.selenium
    integrationTestCompile("com.codeborne:phantomjsdriver:1.2.1") {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
    // openssl native libs are optional and must be added to integration-test classpath separately
    if ('os x' == org.gradle.internal.os.OperatingSystem.current().getFamilyName()) {
        integrationTestCompile "io.netty:netty-tcnative:${versions.tcnative}:osx-x86_64"
    }
    if ('linux' == org.gradle.internal.os.OperatingSystem.current().getFamilyName()) {
        if (new File("/etc/redhat-release").exists()) {
            // use this for linking to libssl.so.10 (RHEL/Fedora/CentOS)
            integrationTestCompile "io.netty:netty-tcnative:${versions.tcnative}:linux-x86_64-fedora"
        } else {
            // use this for linking to libssl.so.1.0.0
            integrationTestCompile "io.netty:netty-tcnative:${versions.tcnative}:linux-x86_64"
        }
    }
    alpnboot "org.mortbay.jetty.alpn:alpn-boot:${versions.alpnboot}"
    distJars("org.elasticsearch:elasticsearch:${versions.elasticsearch}") {
        // dependencies that are overriden by org.xbib deps
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.dataformat'
        exclude group: 'com.google.guava'
        // dependencies that are not for client
        exclude module: 'org.elasticsearch:securesm'
        // we use log4j2, not log4j
        exclude group: 'log4j'
    }
    // Elasticsearch add-ons
    distJars 'com.vividsolutions:jts:1.13'
    distJars 'com.github.spullara.mustache.java:compiler:0.8.13'
    // indy
    distJars "org.codehaus.groovy:groovy-all:${versions.groovy}:indy"
    distJars "org.xbib.malva:malva:${versions.malva}"
    distJars "org.xbib.malva:malva-elasticsearch:${versions.malva}"
    // better netty performance
    distJars "org.javassist:javassist:${versions.javassist}"
    // netty 4.1 needs alpn for http/2
    distJars "org.mortbay.jetty.alpn:alpn-boot:${versions.alpnboot}"
    // additional packages for search service
    distJars "org.xbib:cql:1.0.1"
    distJars "org.xbib:content-xml:1.0.7"
    distJars 'com.fasterxml.woodstox:woodstox-core:5.0.3'
    distJars 'xerces:xercesImpl:2.11.0'
    distJars 'xalan:xalan:2.7.2'
}

compileGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

test {
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

task integrationTest(type: Test) {
    // note: bootstrapClasspath does not use /p (or /a)
    jvmArgs "-Xbootclasspath/p:" + configurations.alpnboot.asPath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = configurations.integrationTestCompile
    classpath += sourceSets.main.output
    classpath += sourceSets.test.output
    classpath += sourceSets.integrationTest.output
    outputs.upToDateWhen { false }
    systemProperty 'log4j.configurationFile', projectDir.absolutePath + '/src/test/resources/log4j2.xml'
    systemProperty 'java.util.logging.manager','org.apache.logging.log4j.jul.LogManager'
    systemProperty 'webapp.bind.uri', 'http://${net.hostname}:9500'
    systemProperty 'webapp.publish.uri', 'http://${net.hostname}:9500'
    testLogging.showStandardStreams = true
}

drivers.each { driver ->
    task "${driver}IntegrationTest"(type: Test, dependsOn: ['jar']) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = configurations.integrationTestCompile
        classpath += sourceSets.main.output
        classpath += sourceSets.test.output
        classpath += sourceSets.integrationTest.output
        outputs.upToDateWhen { false }
        systemProperty 'log4j.configurationFile', projectDir.absolutePath + '/src/test/resources/log4j2.xml'
        reports {
            junitXml.destination = file("$buildDir/test-results/${driver}")
        }
        systemProperty 'geb.build.reportsDir', reporting.file("${driver}/geb")
        systemProperty 'geb.env', driver
        testLogging.showStandardStreams = false
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest

firefoxIntegrationTest {
    mustRunAfter test
}

chromeIntegrationTest {
    mustRunAfter test
    dependsOn unzipChromeDriver
    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsIntegrationTest {
    mustRunAfter test
    dependsOn unzipPhantomJs
    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

clean {
    delete 'logs'
    delete 'sessions'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}

groovydoc {
    docTitle =  description
}

task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar, groovydocJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/linux.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonarqube.gradle'
